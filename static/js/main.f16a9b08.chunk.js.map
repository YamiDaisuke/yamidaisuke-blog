{"version":3,"sources":["components/common/navbar.tsx","components/post/tags.tsx","components/post/head.tsx","components/post/post.tsx","data/posts.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["NavBar","siteName","siteIcon","linkElements","links","map","l","href","link","target","rel","icon","size","className","defaultProps","undefined","Tags","tags","onTagClicked","useState","selectedIndex","changeSelectedIndex","tagsElements","t","index","role","aria-selected","onClick","onKeyDown","Head","title","date","momentDate","moment","format","Post","post","lastEdited","publishDate","createDate","dangerouslySetInnerHTML","__html","body","home","status","library","add","faGithubAlt","faLaptopCode","faLinkedin","App","postsElements","p","navLinks","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f16a9b08.chunk.js","sourcesContent":["import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { IconProp } from '@fortawesome/fontawesome-svg-core';\nimport './navbar.scss';\n\n/**\n * Represents a single icon links to be added in the\n * right hand side of the Navigation Bar\n */\ntype NavLink = {\n    /** The link to open when clicked */\n    link: string;\n    /** A FontAwesome icon to display */\n    icon: IconProp;\n};\n\ntype NavBarProps = {\n    /** The site name to display in the navigation bar */\n    siteName: string;\n    /** An optional FontAwesome to display left of the siteName */\n    siteIcon?: IconProp;\n    /** An optional list of links to display on the right side */\n    links?: Array<NavLink>;\n};\n\n/**\n * Presents a fixed Navigation bar containing the site name, an optional\n * FontAwesome icon to the left of the title a list of icon based links\n * on the right side of the bar\n *\n * @param {NavBarProps} props: The props for this component\n * @returns The `React.ReactElement`\n */\nfunction NavBar({\n    siteName,\n    siteIcon,\n    links,\n}: NavBarProps): React.ReactElement {\n    const linkElements = (links || []).map(\n        (l): React.ReactElement => {\n            return (\n                <a\n                    key={`link_${l.link}`}\n                    href={l.link}\n                    target=\"_blank\"\n                    rel=\"noreferrer\"\n                >\n                    <FontAwesomeIcon icon={l.icon} size=\"2x\" className=\"link\" />\n                </a>\n            );\n        }\n    );\n\n    return (\n        <nav className=\"navbar\">\n            {siteIcon && (\n                <FontAwesomeIcon icon={siteIcon} size=\"2x\" className=\"icon\" />\n            )}\n            <h1 className=\"title\">{siteName}</h1>\n            <div className=\"links\">{linkElements}</div>\n        </nav>\n    );\n}\n\nNavBar.defaultProps = {\n    /** By default no icon will be showed */\n    siteIcon: undefined,\n    /** By default no link will be showed */\n    links: [],\n};\nexport type { NavLink };\nexport default NavBar;\n","import React, { useState } from 'react';\nimport './post.scss';\n\ntype TagsProps = {\n    /** An array of string tags to display on this component */\n    tags: Array<string>;\n    /**\n     * This event will be fired when one of the tags is selected (clicked)\n     * it will get as parameter the index of the selected tag\n     *\n     * @param {number} index: The selected (clicked) index from `tags` prop\n     */\n    onTagClicked?: (index: number) => void;\n};\n\n/**\n * Renders a list of strings to be used as tags of the content, each string\n * the vales are displayed in a fluent left-to-right way starting from\n * the top left corner of the component\n * @param {TagsProps} props: The props for this component\n * @returns The `React.ReactElement`\n */\nfunction Tags({ tags, onTagClicked }: TagsProps): React.ReactElement {\n    const [selectedIndex, changeSelectedIndex] = useState(-1);\n\n    const tagsElements = tags.map(\n        (t, index): React.ReactElement => {\n            return (\n                <li\n                    key={t}\n                    role=\"option\"\n                    aria-selected={selectedIndex === index}\n                    className=\"tag\"\n                    onClick={() => {\n                        changeSelectedIndex(index);\n                        onTagClicked?.(index);\n                    }}\n                    onKeyDown={() => {\n                        changeSelectedIndex(index);\n                        onTagClicked?.(index);\n                    }}\n                >\n                    {t}\n                </li>\n            );\n        }\n    );\n\n    return <ul className=\"tags-container\">{tagsElements}</ul>;\n}\n\nTags.defaultProps = {\n    /** Default empty event listener */\n    onTagClicked: () => {\n        // no action\n    },\n};\n\nexport default Tags;\n","import moment from 'moment';\nimport React from 'react';\nimport Tags from './tags';\nimport './post.scss';\n\ntype HeadProps = {\n    /** The main title */\n    title: string;\n    /** The creation or publishing date of the content */\n    date?: moment.Moment | Date;\n    /** An array of string tags to display on this component */\n    tags?: Array<string>;\n    /**\n     * This event will be fired when one of the tags is selected (clicked)\n     * it will get as parameter the index of the selected tag\n     *\n     * @param {number} index: The selected (clicked) index from `tags` prop\n     */\n    onTagClicked?: (index: number) => void;\n};\n\n/**\n * Renders a header for a post, including title, publish date and tags\n *\n * @param {HeadProps} props: The props for this component\n * @returns The `React.ReactElement`\n */\nfunction Head({\n    title,\n    date,\n    tags,\n    onTagClicked,\n}: HeadProps): React.ReactElement {\n    const momentDate = moment(date);\n\n    return (\n        <div className=\"head\">\n            <h1>{title}</h1>\n            {date && (\n                <h6 className=\"date\">\n                    {momentDate.format('DD-MM-YYYY HH:mm')}\n                </h6>\n            )}\n            <Tags tags={tags || []} onTagClicked={onTagClicked} />\n            <hr />\n        </div>\n    );\n}\n\nHead.defaultProps = {\n    date: undefined,\n    tags: [],\n    /** Default tag clicked event listener */\n    onTagClicked: () => {\n        // no action\n    },\n};\n\nexport default Head;\n","import React from 'react';\nimport PostModel from 'models/post';\nimport Head from './head';\n\ntype PostProps = {\n    /** An model object containing all the post information */\n    post: PostModel;\n};\n\n/** Renders a blog post with title, tags, date and HTML body */\nfunction Post({ post }: PostProps): React.ReactElement {\n    /// For the time being will use dangerouslySetInnerHTML\n    /// we'll switch for something better later on.\n    /* eslint-disable react/no-danger */\n    return (\n        <div className=\"post\">\n            <Head\n                title={post.title}\n                tags={post.tags}\n                date={post.lastEdited || post.publishDate || post.createDate}\n            />\n            <div\n                className=\"body\"\n                dangerouslySetInnerHTML={{ __html: post.body }}\n            />\n        </div>\n    );\n}\n\nexport default Post;\n","/**\n * For the time being this will be our post data source, we are going\n * to move for a more dynamic option with a backend and HTML generation\n * from Markdown\n */\nimport PostModel from 'models/post';\nimport moment from 'moment';\n\nconst home: Array<PostModel> = [\n    {\n        title: 'Welcome!',\n        tags: ['life'],\n        createDate: moment('2021-03-12T15:00:00-03:00'),\n        lastEdited: moment('2021-03-14T16:35:00-03:00'),\n        status: 'published',\n        body: `\n        <p>\n        Hello, and welcome to this humble blog!. You might be wondering why is this guy\n        writing yet another blog tool?, why not use a well know option from out there?.\n        Well let me tell you a story:\n        </p>\n\n        <p>\n        Lately, I've been having fun implementing an Interpreter and Compiler\n        in Swift following the great [books by \"Thorsten Ball\"](https://compilerbook.com)\n        one key element in the book is a \"Not taking shortcuts\" and \"Do it yourself\"\n        philosophy. I have learned a great deal by writing code in that way so I decided\n        I want to do more projects like that, I don't expect this projects to be a\n        commercial success but I expect to be a great success for my technical growth, it\n        will be a good way for me to explore areas outside my comfort zone and my fulltime\n        job.\n        </p>\n        <p>\n        Is not that I think I can do better than all other great solutions out there\n        is just I want to learn about how this solution solve the problems and I believe\n        the best way to learn is by facing the same problems and work out a solution of my\n        own.\n        </p>\n        <p>\n        So I have started this project and will continue to work on my other ideas, which\n        I'll be describing in another post, later on. But for all of these projects I will\n        be following these principles:\n        </p>\n\n        <ul>\n            <li>Apply TDD</li>\n            <li>Document all the code</li>\n            <li>Create CI/CD steps</li>\n            <li>Use the least possible amount of external dependencies</li>\n            <li>Have FUN!!!!</li>\n        </ul>\n\n        <p>\n        Finally aside from the personal projects, I'll be developing to learn I'll look for\n        opportunities to contribute to some open-source projects. I've been a develop\n        for quite a while now and I never made the time to get involved in open source\n        projects, so I'll look into some small contributions to get the hang of it and work\n        my way up from there!.\n        </p>\n\n        <h6>\n        P.S.: Sorry if my writing is not so good, I'll try to get better\n        </h6>\n        `,\n    },\n];\n\nconst data = {\n    home,\n};\n\nexport { home };\nexport default data;\n","import React from 'react';\n\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faGithubAlt, faLinkedin } from '@fortawesome/free-brands-svg-icons';\nimport { faLaptopCode } from '@fortawesome/free-solid-svg-icons';\n\nimport NavBar, { NavLink } from 'components/common/navbar';\n\nimport Post from 'components/post/post';\nimport { home } from 'data/posts';\n\n// Register FontAwesome icons here\nlibrary.add(faGithubAlt, faLaptopCode, faLinkedin);\n\nfunction App(): React.ReactElement {\n    const postsElements = home.map(\n        (p): React.ReactElement => {\n            return <Post post={p} />;\n        }\n    );\n\n    const navLinks: Array<NavLink> = [\n        {\n            link: 'https://github.com/YamiDaisuke',\n            icon: faGithubAlt,\n        },\n        {\n            link: 'https://www.linkedin.com/in/franklin-cruz-a8b213ba/',\n            icon: faLinkedin,\n        },\n    ];\n\n    return (\n        <div className=\"wrapper\">\n            <NavBar\n                siteName=\"YamiDaisuke Blog\"\n                siteIcon=\"laptop-code\"\n                links={navLinks}\n            />\n            <section className=\"container\">{postsElements}</section>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            }\n        );\n    }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './main.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}